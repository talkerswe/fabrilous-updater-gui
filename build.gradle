plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
	id "org.jetbrains.kotlin.plugin.serialization" version "1.6.0"
	id("org.jetbrains.kotlinx.binary-compatibility-validator") version "0.8.0"
}
apply plugin: 'java'

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven { name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/releases" }
	maven { url = "https://maven.shedaniel.me/" }
    mavenCentral()
}

configurations {
	ktlint
}

dependencies {
	ktlint("com.pinterest:ktlint:0.43.0") {
		attributes {
			attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
		}
	}
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"
	modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
	modApi("me.shedaniel.cloth:cloth-config-fabric:6.0.42") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	testImplementation "org.jetbrains.kotlin:kotlin-test:1.6.0"
}

//	task ktlint(type: JavaExec, group: "verification") {
//		description = "Check Kotlin code style."
//		classpath = configurations.ktlint
//		main = "com.pinterest.ktlint.Main"
//		args "src/**/*.kt"
//		// to generate report in checkstyle format prepend following args:
//		// "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
//		// to add a baseline to check against prepend following args:
//		// "--baseline=ktlint-baseline.xml"
//		// see https://github.com/pinterest/ktlint#usage for more
//	}
//	check.dependsOn ktlint
//
//	task ktlintFormat(type: JavaExec, group: "formatting") {
//		description = "Fix Kotlin code style deviations."
//		classpath = configurations.ktlint
//		main = "com.pinterest.ktlint.Main"
//		args "-F", "src/**/*.kt"
//	}
processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand project.properties
	}
}

test {
	useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 16
}

compileKotlin {
    kotlinOptions.jvmTarget = "16"
	kotlinOptions.freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "16"
	kotlinOptions.freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
}
java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}
