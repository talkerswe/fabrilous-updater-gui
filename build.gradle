plugins {
	id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
	id "org.jetbrains.kotlin.plugin.serialization" version "1.6.0"
	id "org.jetbrains.kotlinx.binary-compatibility-validator" version "0.8.0"
	id "com.modrinth.minotaur" version "1.2.1"
}
apply plugin: 'java'

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven { name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/releases" }
	maven { url = "https://maven.shedaniel.me/" }
    mavenCentral()
}

configurations {
	ktlint
}

dependencies {
	ktlint("com.pinterest:ktlint:0.43.1") {
		attributes {
			attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
		}
	}
	minecraft "com.mojang:minecraft:1.18"
	mappings "net.fabricmc:yarn:1.18+build.1:v2"
	modImplementation "net.fabricmc:fabric-loader:0.12.8"
	modImplementation "net.fabricmc:fabric-language-kotlin:1.7.0+kotlin.1.6.0"
	modImplementation "com.terraformersmc:modmenu:3.0.0"
	modApi("me.shedaniel.cloth:cloth-config-fabric:6.0.42") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modImplementation "net.fabricmc.fabric-api:fabric-api:0.43.1+1.18"
	testImplementation "org.jetbrains.kotlin:kotlin-test:1.6.0"
}

//	task ktlint(type: JavaExec, group: "verification") {
//		description = "Check Kotlin code style."
//		classpath = configurations.ktlint
//		main = "com.pinterest.ktlint.Main"
//		args "src/**/*.kt"
//		// to generate report in checkstyle format prepend following args:
//		// "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
//		// to add a baseline to check against prepend following args:
//		// "--baseline=ktlint-baseline.xml"
//		// see https://github.com/pinterest/ktlint#usage for more
//	}
//	check.dependsOn ktlint
//
//	task ktlintFormat(type: JavaExec, group: "formatting") {
//		description = "Fix Kotlin code style deviations."
//		classpath = configurations.ktlint
//		main = "com.pinterest.ktlint.Main"
//		args "-F", "src/**/*.kt"
//	}
processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand project.properties
	}
}

test {
	useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

compileKotlin {
    kotlinOptions.jvmTarget = "17"
	kotlinOptions.freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "17"
	kotlinOptions.freeCompilerArgs += "-Xopt-in=kotlin.RequiresOptIn"
}
java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType
import com.modrinth.minotaur.request.Dependency

task publishModrinth(type: TaskModrinthUpload) {
	onlyIf {
		System.getenv("MODRINTH")
	}

	token = System.getenv("MODRINTH")
	projectId = "TZF87gp0"
	versionNumber = version
	uploadFile = remapJar
	versionType = VersionType.ALPHA
	addGameVersion(project.minecraft_version)
	addLoader("fabric")
	addDependency("Ha28R6CL", Dependency.DependencyType.REQUIRED)
	addDependency("mOgUt4GM", Dependency.DependencyType.REQUIRED)
	changelog = file("CHANGELOG.md").getText("UTF-8")
}
